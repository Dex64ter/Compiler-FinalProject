# Generated from C:/Users/davij/PycharmProjects/Compiler-FinalProject\Compiler.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,247,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,175,8,20,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,186,8,21,1,22,
        4,22,189,8,22,11,22,12,22,190,1,22,1,22,1,22,3,22,196,8,22,1,23,
        4,23,199,8,23,11,23,12,23,200,1,23,4,23,204,8,23,11,23,12,23,205,
        5,23,208,8,23,10,23,12,23,211,9,23,1,24,1,24,5,24,215,8,24,10,24,
        12,24,218,9,24,1,24,5,24,221,8,24,10,24,12,24,224,9,24,1,24,1,24,
        1,25,4,25,229,8,25,11,25,12,25,230,1,25,1,25,4,25,235,8,25,11,25,
        12,25,236,1,26,4,26,240,8,26,11,26,12,26,241,1,27,1,27,1,27,1,27,
        0,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,1,0,5,2,0,65,90,97,122,1,0,48,57,16,
        0,32,32,65,90,97,122,160,163,169,170,173,173,179,179,186,186,195,
        195,352,353,402,402,8218,8218,8220,8220,8240,8240,8364,8364,65533,
        65533,2,0,32,32,48,57,3,0,9,10,13,13,32,32,260,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,0,5,64,1,0,0,0,7,68,1,0,
        0,0,9,70,1,0,0,0,11,72,1,0,0,0,13,77,1,0,0,0,15,81,1,0,0,0,17,83,
        1,0,0,0,19,89,1,0,0,0,21,91,1,0,0,0,23,94,1,0,0,0,25,109,1,0,0,0,
        27,112,1,0,0,0,29,114,1,0,0,0,31,127,1,0,0,0,33,133,1,0,0,0,35,138,
        1,0,0,0,37,144,1,0,0,0,39,152,1,0,0,0,41,174,1,0,0,0,43,185,1,0,
        0,0,45,188,1,0,0,0,47,198,1,0,0,0,49,212,1,0,0,0,51,228,1,0,0,0,
        53,239,1,0,0,0,55,243,1,0,0,0,57,58,5,58,0,0,58,2,1,0,0,0,59,60,
        5,118,0,0,60,61,5,111,0,0,61,62,5,105,0,0,62,63,5,100,0,0,63,4,1,
        0,0,0,64,65,5,101,0,0,65,66,5,110,0,0,66,67,5,100,0,0,67,6,1,0,0,
        0,68,69,5,44,0,0,69,8,1,0,0,0,70,71,5,41,0,0,71,10,1,0,0,0,72,73,
        5,109,0,0,73,74,5,97,0,0,74,75,5,105,0,0,75,76,5,110,0,0,76,12,1,
        0,0,0,77,78,5,118,0,0,78,79,5,97,0,0,79,80,5,114,0,0,80,14,1,0,0,
        0,81,82,5,59,0,0,82,16,1,0,0,0,83,84,5,99,0,0,84,85,5,111,0,0,85,
        86,5,110,0,0,86,87,5,115,0,0,87,88,5,116,0,0,88,18,1,0,0,0,89,90,
        5,61,0,0,90,20,1,0,0,0,91,92,5,41,0,0,92,93,5,59,0,0,93,22,1,0,0,
        0,94,95,5,60,0,0,95,96,5,116,0,0,96,97,5,101,0,0,97,98,5,115,0,0,
        98,99,5,116,0,0,99,100,5,101,0,0,100,101,5,32,0,0,101,102,5,108,
        0,0,102,103,5,111,0,0,103,104,5,103,0,0,104,105,5,105,0,0,105,106,
        5,99,0,0,106,107,5,111,0,0,107,108,5,62,0,0,108,24,1,0,0,0,109,110,
        5,41,0,0,110,111,5,58,0,0,111,26,1,0,0,0,112,113,5,40,0,0,113,28,
        1,0,0,0,114,115,5,60,0,0,115,116,5,99,0,0,116,117,5,111,0,0,117,
        118,5,110,0,0,118,119,5,100,0,0,119,120,5,105,0,0,120,121,5,195,
        0,0,121,122,5,167,0,0,122,123,5,195,0,0,123,124,5,163,0,0,124,125,
        5,111,0,0,125,126,5,62,0,0,126,30,1,0,0,0,127,128,5,119,0,0,128,
        129,5,104,0,0,129,130,5,105,0,0,130,131,5,108,0,0,131,132,5,101,
        0,0,132,32,1,0,0,0,133,134,5,105,0,0,134,135,5,102,0,0,135,136,5,
        32,0,0,136,137,5,40,0,0,137,34,1,0,0,0,138,139,5,101,0,0,139,140,
        5,108,0,0,140,141,5,115,0,0,141,142,5,101,0,0,142,143,5,58,0,0,143,
        36,1,0,0,0,144,145,5,112,0,0,145,146,5,114,0,0,146,147,5,105,0,0,
        147,148,5,110,0,0,148,149,5,116,0,0,149,150,5,32,0,0,150,151,5,40,
        0,0,151,38,1,0,0,0,152,153,5,115,0,0,153,154,5,99,0,0,154,155,5,
        97,0,0,155,156,5,110,0,0,156,157,5,102,0,0,157,158,5,40,0,0,158,
        40,1,0,0,0,159,160,5,105,0,0,160,161,5,110,0,0,161,175,5,116,0,0,
        162,163,5,115,0,0,163,164,5,116,0,0,164,175,5,114,0,0,165,166,5,
        102,0,0,166,167,5,108,0,0,167,168,5,111,0,0,168,169,5,97,0,0,169,
        175,5,116,0,0,170,171,5,98,0,0,171,172,5,111,0,0,172,173,5,111,0,
        0,173,175,5,108,0,0,174,159,1,0,0,0,174,162,1,0,0,0,174,165,1,0,
        0,0,174,170,1,0,0,0,175,42,1,0,0,0,176,177,5,116,0,0,177,178,5,114,
        0,0,178,179,5,117,0,0,179,186,5,101,0,0,180,181,5,102,0,0,181,182,
        5,97,0,0,182,183,5,108,0,0,183,184,5,115,0,0,184,186,5,101,0,0,185,
        176,1,0,0,0,185,180,1,0,0,0,186,44,1,0,0,0,187,189,7,0,0,0,188,187,
        1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,195,
        1,0,0,0,192,196,5,40,0,0,193,194,5,32,0,0,194,196,5,40,0,0,195,192,
        1,0,0,0,195,193,1,0,0,0,196,46,1,0,0,0,197,199,7,0,0,0,198,197,1,
        0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,209,1,
        0,0,0,202,204,7,1,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,
        0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,203,1,0,0,0,208,211,1,
        0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,48,1,0,0,0,211,209,1,0,
        0,0,212,216,5,34,0,0,213,215,7,2,0,0,214,213,1,0,0,0,215,218,1,0,
        0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,222,1,0,0,0,218,216,1,0,
        0,0,219,221,7,3,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,
        0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,222,1,0,0,0,225,226,5,34,
        0,0,226,50,1,0,0,0,227,229,7,1,0,0,228,227,1,0,0,0,229,230,1,0,0,
        0,230,228,1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,234,5,46,0,
        0,233,235,7,1,0,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,0,
        0,236,237,1,0,0,0,237,52,1,0,0,0,238,240,7,1,0,0,239,238,1,0,0,0,
        240,241,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,54,1,0,0,0,243,
        244,7,4,0,0,244,245,1,0,0,0,245,246,6,27,0,0,246,56,1,0,0,0,13,0,
        174,185,190,195,200,205,209,216,222,230,236,241,1,6,0,0
    ]

class CompilerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    CMDWHILE = 16
    CMDIF = 17
    CMDELSE = 18
    PRINT = 19
    SCAN = 20
    VARTYPE = 21
    VALBOOL = 22
    NAMEFUNCTION = 23
    VARNAME = 24
    STRING = 25
    VALFLOAT = 26
    VALINT = 27
    WS = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'void'", "'end'", "','", "')'", "'main'", "'var'", "';'", 
            "'const'", "'='", "');'", "'<teste logico>'", "'):'", "'('", 
            "'<condi\\u00C3\\u00A7\\u00C3\\u00A3o>'", "'while'", "'if ('", 
            "'else:'", "'print ('", "'scanf('" ]

    symbolicNames = [ "<INVALID>",
            "CMDWHILE", "CMDIF", "CMDELSE", "PRINT", "SCAN", "VARTYPE", 
            "VALBOOL", "NAMEFUNCTION", "VARNAME", "STRING", "VALFLOAT", 
            "VALINT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "CMDWHILE", "CMDIF", "CMDELSE", "PRINT", "SCAN", 
                  "VARTYPE", "VALBOOL", "NAMEFUNCTION", "VARNAME", "STRING", 
                  "VALFLOAT", "VALINT", "WS" ]

    grammarFileName = "Compiler.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


